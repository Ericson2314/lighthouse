/* -----------------------------------------------------------------------------
 *
 * (c) The GHC Team, 1998-2004
 *
 * Exception support
 *
 * This file is written in a subset of C--, extended with various
 * features specific to GHC.  It is compiled by GHC directly.  For the
 * syntax of .cmm files, see the parser in ghc/compiler/cmm/CmmParse.y.
 *
 * ---------------------------------------------------------------------------*/

#include "Cmm.h"

#ifdef __PIC__
import base_GHCziBase_True_closure;
#endif

/* -----------------------------------------------------------------------------
   Catch frames
   -------------------------------------------------------------------------- */

#ifdef REG_R1
#define SP_OFF 0
#else
#define SP_OFF 1
#endif

/* Catch frames are very similar to update frames, but when entering
 * one we just pop the frame off the stack and perform the correct
 * kind of return to the activation record underneath us on the stack.
 */

INFO_TABLE_RET(stg_catch_frame, CATCH_FRAME,
#if defined(PROFILING)
  W_ unused1, W_ unused2,
#endif
  W_ unused3, "ptr" W_ unused4)
#ifdef REG_R1
   {
      Sp = Sp + SIZEOF_StgCatchFrame;
      jump %ENTRY_CODE(Sp(SP_OFF));
   }
#else
   {
      W_ rval;
      rval = Sp(0);
      Sp = Sp + SIZEOF_StgCatchFrame;
      Sp(0) = rval;
      jump %ENTRY_CODE(Sp(SP_OFF));
   }
#endif

/* -----------------------------------------------------------------------------
 * The catch infotable
 *
 * This should be exactly the same as would be generated by this STG code
 *
 * catch = {x,h} \n {} -> catch#{x,h}
 *
 * It is used in deleteThread when reverting blackholes.
 * -------------------------------------------------------------------------- */

INFO_TABLE(stg_catch,2,0,FUN,"catch","catch")
{
  R2 = StgClosure_payload(R1,1); /* h */
  R1 = StgClosure_payload(R1,0); /* x */
  jump catchzh_fast;
}

catchzh_fast
{
    /* args: R1 = m :: IO a, R2 = handler :: Exception -> IO a */
    STK_CHK_GEN(SIZEOF_StgCatchFrame + WDS(1), R1_PTR & R2_PTR, catchzh_fast);
  
    /* Set up the catch frame */
    Sp = Sp - SIZEOF_StgCatchFrame;
    SET_HDR(Sp,stg_catch_frame_info,W_[CCCS]);
    
    StgCatchFrame_handler(Sp) = R2;
    TICK_CATCHF_PUSHED();

    /* Apply R1 to the realworld token */
    TICK_UNKNOWN_CALL();
    TICK_SLOW_CALL_v();
    jump stg_ap_v_fast;
}

/* -----------------------------------------------------------------------------
 * The raise infotable
 * 
 * This should be exactly the same as would be generated by this STG code
 *
 *   raise = {err} \n {} -> raise#{err}
 *
 * It is used in raisezh_fast to update thunks on the update list
 * -------------------------------------------------------------------------- */

INFO_TABLE(stg_raise,1,0,THUNK_1_0,"raise","raise")
{
  R1 = StgThunk_payload(R1,0);
  jump raisezh_fast;
}

section "data" {
  no_break_on_exception: W_[1];
}

INFO_TABLE_RET(stg_raise_ret, RET_SMALL, "ptr" W_ arg1)
{
  R1 = Sp(1);
  Sp = Sp + WDS(2);
  W_[no_break_on_exception] = 1;  
  jump raisezh_fast;
}

raisezh_fast
{
    W_ handler;
    W_ frame_type;
    W_ exception;
    /* args : R1 :: Exception */

   exception = R1;

#if defined(PROFILING)
    /* Debugging tool: on raising an  exception, show where we are. */

    /* ToDo: currently this is a hack.  Would be much better if
     * the info was only displayed for an *uncaught* exception.
     */
    if (RtsFlags_ProfFlags_showCCSOnException(RtsFlags) != 0::I32) {
      foreign "C" fprintCCS_stderr(W_[CCCS] "ptr") [];
    }
#endif
    
retry_pop_stack:
    StgTSO_sp(CurrentTSO) = Sp;
    (frame_type) = foreign "C" raiseExceptionHelper(BaseReg "ptr", CurrentTSO "ptr", exception "ptr") [];
    Sp = StgTSO_sp(CurrentTSO);

#ifdef ALLOW_INTERPRETER
    // After stripping the stack, see whether we should break here for
    // GHCi (c.f. the -fbreak-on-exception flag).  We do this after
    // stripping the stack for a reason: we'll be inspecting values in
    // GHCi, and it helps if all the thunks under evaluation have
    // already been updated with the exception, rather than being left
    // as blackholes.
    if (W_[no_break_on_exception] != 0) {
        W_[no_break_on_exception] = 0;
    } else {
        if (TO_W_(CInt[rts_stop_on_exception]) != 0) {
            W_ ioAction;
            // we don't want any further exceptions to be caught,
            // until GHCi is ready to handle them.  This prevents
            // deadlock if an exception is raised in InteractiveUI,
            // for exmplae.  Perhaps the stop_on_exception flag should
            // be per-thread.
            W_[rts_stop_on_exception] = 0;
            ("ptr" ioAction) = foreign "C" deRefStablePtr (W_[rts_breakpoint_io_action] "ptr") [];
            Sp = Sp - WDS(7);
            Sp(6) = exception;
            Sp(5) = stg_raise_ret_info;
            Sp(4) = stg_noforceIO_info;    // required for unregisterised
            Sp(3) = exception;             // the AP_STACK
            Sp(2) = base_GHCziBase_True_closure; // dummy breakpoint info
            Sp(1) = base_GHCziBase_True_closure; // True <=> a breakpoint
            R1 = ioAction;
            jump RET_LBL(stg_ap_pppv);
        }
    }
#endif

    if (frame_type == STOP_FRAME) {
	/*
	 * We've stripped the entire stack, the thread is now dead.
	 * We will leave the stack in a GC'able state, see the stg_stop_thread
	 * entry code in StgStartup.cmm.
	 */
	Sp = CurrentTSO + TSO_OFFSET_StgTSO_stack 
		+ WDS(TO_W_(StgTSO_stack_size(CurrentTSO))) - WDS(2);
	Sp(1) = exception;	/* save the exception */
	Sp(0) = stg_enter_info; /* so that GC can traverse this stack */
	StgTSO_what_next(CurrentTSO) = ThreadKilled::I16;
	SAVE_THREAD_STATE();	/* inline! */

        foreign "C" debugBelch("Uncaught exception reached STOP frame.\n");
        jump stg_threadFinished;
    }

    /* Ok, Sp points to the enclosing CATCH_FRAME.  Pop everything down to
     * and including this frame, update Su, push R1, and enter the handler.
     */
    handler = StgCatchFrame_handler(Sp);

    /* Call the handler, passing the exception value and a realworld
     * token as arguments.
     */
    Sp_adj(-1);
    Sp(0) = exception;
    R1 = handler;
    Sp_adj(-1);
    TICK_UNKNOWN_CALL();
    TICK_SLOW_CALL_pv();
    jump RET_LBL(stg_ap_pv);
}

raiseIOzh_fast
{
  /* Args :: R1 :: Exception */
  jump raisezh_fast;
}
