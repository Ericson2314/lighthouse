dnl
dnl Binary distribution configure script
dnl
#!/bin/sh
#

# Is it there?
AC_INIT(Makefile-vars.in)

exeext=''

#
# First off, what system are we running under?
#
AC_CANONICAL_SYSTEM

dnl ** canonicalize platform names
# Canonicali[sz]e the platform name
TargetPlatform=`/bin/sh $srcdir/config.sub $target` || exit 1

#
# The following will be more difficult when we *are* cross-compiling.
# Suitable names to slam in *_CPP are in platform.h.in.
# We also record the architecture, vendor, and operating system (OS)
# separately.
case $TargetPlatform in
alpha*-dec-osf[[12]]*)
	TargetPlatform=alpha-dec-osf1;;
alpha*-dec-osf[[345]]*)
	TargetPlatform=alpha-dec-osf3;;
alpha*-unknown-linux)
	TargetPlatform=alpha-unknown-linux;;
alpha*-unknown-freebsd*)
	TargetPlatform=alpha-unknown-freebsd;;
hppa1.1-hp-hpux*)
	TargetPlatform=hppa1.1-hp-hpux;;
i[[3456]]86-*-linuxaout*)
	TargetPlatform=i386-unknown-linuxaout;;
i[[3456]]86-*-linux*)
	TargetPlatform=i386-unknown-linux;;
i[[3456]]86-*-freebsd2*)
	TargetPlatform=i386-unknown-freebsd2;;
i[[3456]]86-*-freebsd[[3-9]]*)
	TargetPlatform=i386-unknown-freebsd;;
i[[3456]]86-*-netbsd*)
	TargetPlatform=i386-unknown-netbsd;;
i[[3456]]86-*-openbsd*)
	TargetPlatform=i386-unknown-openbsd;;
i[[3456]]86-*-solaris2*)
	TargetPlatform=i386-unknown-solaris2;;
i[[3456]]86-*-cygwin*)
	exeext='.exe'
	TargetPlatform=i386-unknown-cygwin32;;
i[[3456]]86-*-mingw32*)
	exeext='.exe'
	# We assume you're using mingw32 via the gcc that comes
	# with cygwin, and not the native port, so let's augment
	# the gcc command-line used here with -mno-cygwin -mwin32
	# to arrange for good things to happen.
	CFLAGS="-mno-cygwin -mwin32 $CFLAGS"
	TargetPlatform=i386-unknown-mingw32
	;;
i[[3456]]86-apple-darwin*)
	TargetPlatform=i386-apple-darwin;;
m68k-next-nextstep2)
	TargetPlatform=m68k-next-nextstep2;;
m68k-next-nextstep3)
	TargetPlatform=m68k-next-nextstep3;;
i[[3456]]86-next-nextstep3)
	TargetPlatform=i386-next-nextstep3;;
m68k-sun-sunos4*)
	TargetPlatform=m68k-sun-sunos4;;
mips-dec-ultrix*)
        TargetPlaformP=mips-dec-ultrix;;
mips-sgi-irix*)
	TargetPlatform=mips-sgi-irix;;
powerpc-ibm-aix*)
	TargetPlatform=powerpc-ibm-aix;;
rs6000-ibm-aix*)
	TargetPlatform=rs6000-ibm-aix;;
powerpc-apple-darwin*)
	TargetPlatform=powerpc-apple-darwin;;
powerpc-*-linux*)
	TargetPlatform=powerpc-unknown-linux;;
powerpc64-*-linux*)
	TargetPlatform=powerpc64-unknown-linux;;
sparc-sun-sunos4*)
	TargetPlatform=sparc-sun-sunos4;;
sparc-sun-solaris2*)
	TargetPlatform=sparc-sun-solaris2;;
x86_64-*-linux*)
        TargetPlatform=x86_64-unknown-linux;;
x86_64-*-freebsd*)
	TargetPlatform=x86_64-unknown-freebsd;;
x86_64-*-openbsd*)
	TargetPlatform=x86_64-unknown-openbsd;;
x86_64-*-netbsd*)
	TargetPlatform=x86_64-unknown-netbsd;;
x86_64-apple-darwin*)
	TargetPlatform=x86_64-apple-darwin;;
*)
        echo "Unrecognised platform: $TargetPlatform"
        exit 1
        ;;
esac
echo "Which we'll further canonicalise into: $TargetPlatform"

AC_SUBST(TargetPlatform)
AC_SUBST(exeext)

FP_FIND_ROOT

#
dnl ** Check Perl installation **
#
AC_PATH_PROG(PerlCmd,perl)
if test -z "$PerlCmd"; then
   echo "You must install perl before you can continue"
   echo "Perhaps it is already installed, but not in your PATH?"
   exit 1
fi
FPTOOLS_SHEBANG_PERL

#
dnl ** figure out how to do a BSD-ish install **
#
AC_PROG_INSTALL

#
dnl ** how to do symlinks **
#
AC_PROG_LN_S()

#
dnl ** how to invoke `ar' and `ranlib'
#
FP_PROG_AR_NEEDS_RANLIB

#
dnl ** Find the path to sed **
#
AC_PATH_PROG(SedCmd,sed)

#
dnl ** How to invoke cpp directly **
#
FP_HAVE_GCC
AC_PROG_CPP

#
dnl ** Check gcc version and flags we need to pass it **
#
FP_GCC_EXTRA_FLAGS

#
AC_CONFIG_FILES(Makefile-vars extra-gcc-opts)
AC_OUTPUT

echo "****************************************************"
echo "Configuration done, ready to 'make install'"
echo "(see README and INSTALL files for more info.)"
echo "****************************************************"
